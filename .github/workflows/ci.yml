name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./...

    - name: Build
      run: go build ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -l .)" != "" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -l .
          exit 1
        fi

    - name: Test RLNC Network Example
      run: |
        cd examples/rlnc-network
        go build
        ./test.sh

    - name: Test Reed-Solomon Network Example
      run: |
        cd examples/rs-network
        go build
        ./test.sh

  shadow-simulation:
    name: Shadow Network Simulation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: pip3 install networkx pyyaml

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@1.89.0

    - name: Install Shadow simulator
      run: |
        # Install Shadow dependencies
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          findutils \
          libclang-dev \
          libc-dbg \
          libglib2.0-0 \
          libglib2.0-dev \
          make \
          netbase \
          python3 \
          python3-networkx \
          xz-utils

        # Build and install Shadow v3.2.0 from source
        git clone --depth 1 --branch v3.2.0 https://github.com/shadow/shadow.git shadow-simulator
        cd shadow-simulator
        git checkout v3.2.0
        ./setup build --clean
        ./setup install
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Download Go dependencies
      run: go mod download

    - name: Run Shadow simulation tests
      run: |
        cd shadow
        make all-topologies
      timeout-minutes: 60

    - name: Upload Shadow logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: shadow-logs
        path: shadow/shadow.data/
